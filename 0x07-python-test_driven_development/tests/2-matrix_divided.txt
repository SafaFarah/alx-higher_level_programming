Import function from module
-------------------------------
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

regluar divisio:
>>> matrix_divided([[3]], 3)
[[1.0]]

>>> matrix_divided([[3, 3], [18, 15]], -6)
[[-0.5, -0.5], [-3.0, -2.5]]

division by zero:
>>> matrix_divided([[9, 9], [1, 7]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

different size of matrix rows:
>>> matrix_divided([[6], [12, 3]], 8)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

matrix not a list of lists of integers:
>>> matrix_divided([[3, 9], [12, "15"]], 9)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

matrix  not List of Lists:
>>> matrix_divided([3, [12, 3]], 8)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

matrix  not List of Lists:
>>> matrix_divided(3, 8)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

div= string:
>>> matrix_divided([[3, 3], [18, 15]], "6")
Traceback (most recent call last):
TypeError: div must be a number

div= float('inf')
>>> matrix_divided([[9, 9], [1, 7]], float('inf'))
[[0.0, 0.0], [0.0, 0.0]]

matrix= list of lists of integers with one float(inf/nan):
>>> matrix_divided([[3, 3], [18, float('nan')]], -6)
[[-0.5, -0.5], [-3.0, nan]]

matrix= list of lists of integers with one float(inf/nan), div= float(inf/nan):
>>> matrix_divided([[3, 3], [18, float('inf')]], float('nan'))
[[nan, nan], [nan, nan]]

missing one argument:
>>> matrix_divided(6)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

missing 2 arguments:
>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
